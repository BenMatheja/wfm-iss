package org.camunda.bpm.iss.api.mock.pb;

import java.util.logging.Logger;

import javax.jws.WebService;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.core.Response;

import org.camunda.bpm.iss.DTO.in.DesignRequestDTO;
import org.camunda.bpm.iss.api.mock.SendThread;
import org.camunda.bpm.iss.entity.util.ArtType;
import org.camunda.bpm.iss.entity.util.GlobalDefinitions;
import org.codehaus.jackson.map.ObjectMapper;

@WebService
@Path("/pb/trigger")
public class PbTrigger{

	private final static Logger LOGGER = Logger.getLogger("PB-API-TRIGGER");
	
	@GET
	@Path("/requestDesign")
	public Response requestDesign(){
		LOGGER.info("Webservice called!");
 
		// specify the REST web service to interact with
		String baseUrl = GlobalDefinitions.getPbBaseURL();
        String relativeUrl = GlobalDefinitions.URL_API_PB_RECEIVE_DESIGN_REQUEST;
        String url = baseUrl + relativeUrl;
		
        //Create DTO
        DesignRequestDTO designDTO = new DesignRequestDTO();
        designDTO.setDesignTitle("Title generated by " + this.getClass().getName());
        designDTO.setArtType(ArtType.logo);
        designDTO.setAdditionalInformation("Additional info generated by " + this.getClass().getName());
        
        String jsonToSend = null;
        try {    
            //Instantiate JSON mapper
            ObjectMapper mapper = new ObjectMapper();
           
            //Parse to json
            jsonToSend = mapper.writeValueAsString(designDTO);
        } catch (Exception e){
        	e.printStackTrace();
        	return Response.serverError().build();
        }    
       
        //Send next API call in new thread, which delays the call
        Runnable sendThread = new SendThread(jsonToSend, url, 0, "SendReqDesignReq");
        new Thread(sendThread).start();
        
        //Return result with statusCode 200
      	return Response.ok().build(); 
	}


}
